#   What & Why of useReducer

    + useReducer --> used for state management
    + an alternative to useState
    + useState is built using useReducer
    + When to useReducer vs useState ?


# Concept of Reducer in JavaScript

    + useState - state
      useEffect - side effects
      useContext - context API
      useReducer - reducers

      If you have knowledge of redux, better will be understanding of reducers

      reduce method in js vs useReducer

    + reduce in JavaScript                          useReducer in React
        array.reduce(reducer, initialValue)             useReducer(reducer, initialState)
        singleValue = reducer(accumulator, itemValue)   newState = reducer(currentState, action)
                                                            *** action parameter is what dictates 
                                                            the tranasition of currentState to newState

    +   reduce method returns a single value            useReducer returns a pair of values,
                                                        [newState, dispatch]


# useReducer (Simple state & action)
    + Counter example using useReducer
    + 1) import useReducer from react
      2) Define reducer function & initialState outside the components
         action is an instruction to the reducer function by which it performs necessary tranasition
         + use switch stmt for actions 
      3) We need to get hold of value to display in jsx & we need to get a way to call reducer function
         with appropriate action
            useReducer returns an array containing state, dispatch
                dispatch method allows us to execute a particular action
                The argument to dispatch method is an action that is specificed in reducer method


# userReducer (Complex state & action)
    + we are going to implement useReucer with state object & action object
    + What is the advantages of using state & action as an object ?
        1) Think about situation where we have to increment or decrement by certain value, 
            then in action in addition to type, value will also be present
            Thus by making use of action as an object in reducer function, we can use additional data in reducer function
        
        2) State as an object, in case of two different Counters
            Thus we are able to keep track of multiple state variables


# Multiple useReducers
    + Using Multiple useReducers hooks is a better alternative incase we want same type of state transition
        across multiple state variables
    + It provides us to reduce complexity of using object in state
     & also stops us in duplicating the code in reducer function


#  useReducer with useContext
    + useReducer --> Local State management
    + Share state between components --> Global state management
        useReducer + useContext
    + ComponentA to ComponentF exists
        our Goal is to maintain a state in App.jsx and modify that state
        from ComponentA, ComponentD, ComponentF

        Steps:
        1) To create a counter in App.jsx using useReducer hook
        2) To provide & consume the counter context in the required component
            we make use of the context to provide count & dispatch value and use it in child components


#   Fetch Data using useState & useEffect
    + We know fetching data using useEffect hook + useState hook


#   Fetch DAta using useReducer & useEffect
    + IN doing so, we have grouped the related state variables together & state transitions are also grouped together
    + 4 steps to implement
        1) Make necessary imports
        2) Declare initialState & define reducer function
        3) Invoking useEffect & useReducer to fetch the data & set the state