useEffect Hook

# Need for useEffect hook
    + while working with class components, we might have performed some side-effects for our components
        such as Updating DOM, 
                Fetching data from API endpoint
                Setting up subscriptions & timers
    + There are certain problems associated such as repetition of code in various component life cycle methods
        & unable to maintain functionality related to a side effect at single place.
    
    + The Effect hook lets us perform side effects in functional components
    + It is a close replacement for 
        componentDidMount,
        componentDidUpdate & 
        componentWillUnmount
    
# How it works ?
    + useEffect takes a callback as an argument, such that
        react, for every render of the component (i.e after first render & after every update) will execute
        the callback function provided in useEffect

    + useEffect is placed inside the component, by doing so, we can access
        the state & props of the component without having to write any additional code

# useEffect - conditional run effects
    + As we know that useEffect hook calls the callback function after every render
        but it might cause performance issues in some cases
        Hence, it is need to conditionally run callback given to useEffect

    + For conditionally executing an effect, we pass in second parameter to useEffect
        This parameter is an Array, where we will specify for either prop or state that
        we need to watch for
        & Thus only if the props or state specified in array changes, Effect will be get executed


