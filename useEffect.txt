useEffect Hook

# Need for useEffect hook
    + while working with class components, we might have performed some side-effects for our components
        such as Updating DOM, 
                Fetching data from API endpoint
                Setting up subscriptions & timers
    + There are certain problems associated such as repetition of code in various component life cycle methods
        & unable to maintain functionality related to a side effect at single place.
    
    + The Effect hook lets us perform side effects in functional components
    + It is a close replacement for 
        componentDidMount,
        componentDidUpdate & 
        componentWillUnmount
    
# How it works ?
    + useEffect takes a callback as an argument, such that
        react, for every render of the component (i.e after first render & after every update) will execute
        the callback function provided in useEffect

    + useEffect is placed inside the component, by doing so, we can access
        the state & props of the component without having to write any additional code

# useEffect - conditional run effects
    + As we know that useEffect hook calls the callback function after every render
        but it might cause performance issues in some cases
        Hence, it is need to conditionally run callback given to useEffect

    + For conditionally executing an effect, we pass in second parameter to useEffect
        This parameter is an Array, where we will specify for either prop or state that
        we need to watch for
        & Thus only if the props or state specified in array changes, Effect will be get executed


# useEffect - How to run an Effect ONLY ONCE ?
    (How to acheive componentDidMount with useEffect)
    + By specifying an empty dependency Array, we can ask react to
        produce effect only once, i.e on initial render


# useEffect - How to run useEffect with cleanup ?
    (How to acheive componentWillUnmount functionality with useEffect)
    +  When we Unmount a component, Make sure all the subscriptions & listeners 
        are cancelled i.e clean-up after your component
    + In Class components, we will handle the cleanup code in componentWillUnmount life-cycle
    + In functional component, the callback function which is passed as first argument to useEffect 
        can return a function, which will be executed when the component will unmount
            So, whatever we return from callback function is basically our Cleanup function 
            through which we can avoid memory leak


# useEffect - Mistakes oftenly made - Incorrect dependencies
    + If you think dependency array is a way to specify when to re-run the Effect,
        you are going to run into problems, instead Dependency array should be thought of 
        as a way to let react know about everything that the effect must watch for changes

    + Sometimes, there might be need to call a function within useEffect
        & If that function is defined outside of useEffect , also uses some prop
        & for useEffect, if we didn't specified that some prop in Dependency array
        which is not recommended

        So the recommended way is, When we need to call a function within useEffect, we have to
        define the function within useEffect
        So that, we will know that we have some prop which needed to be specified as Dependency

    + Hence, be cautious when specifying the Dependency list for useEffect


# useEffect - Multiple useEffect calls are allowed inside a functional component


# useEffect - Data fetching
    + controlled-input --> we need to set the value, and listen to onChange event, to assign 
        the value back to the element
        